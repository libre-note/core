// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "librenote/app/model"

	mock "github.com/stretchr/testify/mock"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: c, id
func (_m *UserUsecase) GetByID(c context.Context, id int32) (model.User, error) {
	ret := _m.Called(c, id)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(context.Context, int32) model.User); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: c, email, password
func (_m *UserUsecase) Login(c context.Context, email string, password string) (model.User, error) {
	ret := _m.Called(c, email, password)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string) model.User); ok {
		r0 = rf(c, email, password)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(c, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Registration provides a mock function with given fields: c, m
func (_m *UserUsecase) Registration(c context.Context, m *model.User) error {
	ret := _m.Called(c, m)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) error); ok {
		r0 = rf(c, m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: c, m, p
func (_m *UserUsecase) Update(c context.Context, m *model.User, p model.Password) error {
	ret := _m.Called(c, m, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User, model.Password) error); ok {
		r0 = rf(c, m, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
