// Code generated by sqlc. DO NOT EDIT.
// source: user.sqlite

package pgsql

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  full_name, email, hash, salt, is_active, updated_at
) VALUES (
  $1, $2, $3, $4, $5,  $6
)
RETURNING id, full_name, email, hash, salt, is_active, is_trashed, created_at, updated_at
`

type CreateUserParams struct {
	FullName  string    `json:"full_name"`
	Email     string    `json:"email"`
	Hash      string    `json:"hash"`
	Salt      string    `json:"salt"`
	IsActive  bool      `json:"is_active"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FullName,
		arg.Email,
		arg.Hash,
		arg.Salt,
		arg.IsActive,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Hash,
		&i.Salt,
		&i.IsActive,
		&i.IsTrashed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, full_name, email, hash, salt, is_active, is_trashed, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Hash,
		&i.Salt,
		&i.IsActive,
		&i.IsTrashed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
